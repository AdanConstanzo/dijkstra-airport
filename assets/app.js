function Set(){this.values=[],this.numberOfValues=0}angular.module("app",["ngRoute"]),angular.module("app").controller("AirportCtrl",["$scope","AirportSvc",function(h,i){var a=new E,c=new E,d={},v=new t;h.called=!1;var A=document.getElementById("dijk");A.disabled=!0;var s,g={},l={},f=[],p={},n=document.getElementById("from-form"),r=document.getElementById("to-form");function u(){0==n.value.length&&0==r.value.length?n.value=this.title:0<n.value.length&&0==r.value.length&&(r.value=this.title)}function m(t,e){d[t]=e}i.getAirports().then(function(t){h.Airports=t;s=new google.maps.Map(document.getElementById("map"),{zoom:8,center:{lat:33.942536,lng:-118.408075}});for(var e,n=h.Airports.length,r=0;r<n;r++){v.addVertex(h.Airports[r].IATA),g[h.Airports[r].IATA]=h.Airports[r],d[h.Airports[r].IATA]=Number.MAX_VALUE,a.add(h.Airports[r].IATA),c.add(h.Airports[r].IATA);var o={lat:h.Airports[r].LAT,lng:h.Airports[r].LON};(e=new google.maps.Marker({position:o,map:s,title:h.Airports[r].IATA})).addListener("click",u,!1),l[h.Airports[r].IATA]=e}i.getRoutes().then(function(t){for(var e=0;e<t.length;e++)p[t[e].From+"-"+t[e].From]=t[e].Airport,v.addEdge(t[e].From,t[e].To,t[e].Distance);A.disabled=!1})}),h.Dijkstra=function(){var t=document.getElementById("from-form"),e=document.getElementById("to-form");!function(t,e){var n=!1;if(3==t.value.length&&3==e.value.length){for(var r=0;r<a.length();r++)if(a.at(r)==t.value){n=!0;break}n=!1;for(var r=0;r<a.length();r++)if(a.at(r)==e.value){n=!0;break}}return n}(t,e)||o(t.value,e.value)};var o=function(t,e){var n={};for(A.disabled=!0,h.called?b(c,d):h.called=!0,m(t,0);0<c.length();){var r=O();if(e==r)break;c.remove(r);for(var o=v.GetNeigh(r),i=0;i<o.length;i++){var a=d[r]+o[i].distance,u=Math.round(10*a)/10,s=o[i].to;u<d[s]&&(m(s,u),n[s]=r)}}for(var l=[],f=e;l.unshift(f),null!=(f=n[f]););var p=[];for(i=0;i<l.length;i++)p.push(g[l[i]]);T(p),A.disabled=!1};function I(t){for(var e=0;e<h.Airports.length;e++)l[h.Airports[e].IATA].setMap(t)}function y(t,e){for(var n=v.GetNeigh(t),r=0;r<n.length;r++)if(n[r].to==e)return n[r]}var T=function(t){var e=document.getElementById("result"),n={path:google.maps.SymbolPath.FORWARD_CLOSED_ARROW};I(null);for(var r=0;r<t.length;r++){var o=document.createElement("p");if(0==r)var i=y(t[r].IATA,t[r+1].IATA),a="Leave "+t[r].IATA+"("+t[r].Name+") on "+p[t[r].IATA+"-"+t[r].IATA]+"  after flying "+i.distance+" km";else if(r==t.length-1)a="Arrive at "+t[r].IATA+"("+t[r].Name+")";else i=y(t[r].IATA,t[r+1].IATA),a="Change planes at "+t[r].IATA+"("+t[r].Name+") to "+p[t[r].IATA+"-"+t[r].IATA]+" and fly "+i.distance+" km";o.innerHTML+=a,e.appendChild(o)}for(r=0;r<t.length-1;r++){l[t[r].IATA].setMap(s),l[t[r+1].IATA].setMap(s);var u=new google.maps.Polyline({path:[{lat:t[r].LAT,lng:t[r].LON},{lat:t[r+1].LAT,lng:t[r+1].LON}],icons:[{icon:n,offset:"100%"}],map:s});f.push(u)}},O=function(){for(var t,e=d[c.at(0)],n=0;n<c.length();n++)d[c.at(n)]<=e&&(e=d[c.at(n)],t=c.at(n));return t},b=function(t,e){new E;for(var n=0;n<h.Airports.length;n++)d[h.Airports[n].IATA]=Number.MAX_VALUE,c.add(h.Airports[n].IATA)};function t(){this.vertices=[],this.edges=[],this.numberOfEdges=0}function E(){this.values=[],this.numberOfValues=0}h.clickRepeat=function(){for(var t=0;t<f.length;t++)f[t].setMap(null);I(s),r.value="",n.value="";for(var e=document.getElementById("result");e.hasChildNodes();)e.removeChild(e.lastChild)},t.prototype.addVertex=function(t){-1==this.vertices.indexOf(t)&&(this.vertices.push(t),this.edges[t]=[])},t.prototype.addEdge=function(t,e,n){var r={to:e,distance:n};this.edges[t].push(r),this.numberOfEdges++},t.prototype.size=function(){return this.vertices.length},t.prototype.GetNeigh=function(t){return this.edges[t]},E.prototype.at=function(t){return this.values[t]},E.prototype.add=function(t){~this.values.indexOf(t)||(this.values.push(t),this.numberOfValues++)},E.prototype.remove=function(t){var e=this.values.indexOf(t);~e&&(this.values.splice(e,1),this.numberOfValues--)},E.prototype.length=function(){return this.numberOfValues}}]),angular.module("app").config(["$routeProvider",function(t){t.when("/",{controller:"AirportCtrl",templateUrl:"/templates/home.html"})}]),angular.module("app").service("AirportSvc",["$http",function(e){this.getAirports=function(){return e.get("/api/airports/").then(function(t){return t.data})},this.getRoutes=function(){return e.get("/api/routes/").then(function(t){return t.data})},this.getOneAirport=function(t){return e.get("/api/airports/"+t).then(function(t){return t.data})}}]),Set.prototype.add=function(t){~this.values.indexOf(t)||(this.values.push(t),this.numberOfValues++)},Set.prototype.remove=function(t){var e=this.values.indexOf(t);~e&&(this.values.splice(e,1),this.numberOfValues--)},Set.prototype.contains=function(t){return-1!==this.values.indexOf(t)},Set.prototype.union=function(t){var e=new Set;return t.values.forEach(function(t){e.add(t)}),this.values.forEach(function(t){e.add(t)}),e},Set.prototype.intersect=function(e){var n=new Set;return this.values.forEach(function(t){e.contains(t)&&n.add(t)}),n},Set.prototype.difference=function(e){var n=new Set;return this.values.forEach(function(t){e.contains(t)||n.add(t)}),n},Set.prototype.isSubset=function(t){return t.values.every(function(t){return this.contains(t)},this)},Set.prototype.length=function(){return this.numberOfValues},Set.prototype.print=function(){console.log(this.values.join(" "))};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
